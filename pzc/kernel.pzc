#include "pzc_builtin.h"
#include "pzc_atomic.h"
#include "../types.hpp"

signed char max(signed char x, signed char y) {
  if (y > x) return y;
  else return x;
}

int popcnt(uint64_t x) {
  x = ((x & UINT64_C(0xAAAAAAAAAAAAAAAA)) >>  1) + (x & UINT64_C(0x5555555555555555));
  x = ((x & UINT64_C(0xCCCCCCCCCCCCCCCC)) >>  2) + (x & UINT64_C(0x3333333333333333));
  x = ((x & UINT64_C(0xF0F0F0F0F0F0F0F0)) >>  4) + (x & UINT64_C(0x0F0F0F0F0F0F0F0F));
  x = ((x & UINT64_C(0xFF00FF00FF00FF00)) >>  8) + (x & UINT64_C(0x00FF00FF00FF00FF));
  x = ((x & UINT64_C(0xFFFF0000FFFF0000)) >> 16) + (x & UINT64_C(0x0000FFFF0000FFFF));
  return ((x >> 32) + x) & UINT64_C(0x00000000FFFFFFFF);
}

int score(const Board& bd) {
  int me = popcnt(bd.me);
  int op = popcnt(bd.op);
  if (me == op) return 0;
  if (me > op) return 64 - 2*op;
  else return -64 + 2*me;
}

uint64_t empty(const Board& bd) {
  return ~(bd.me | bd.op);
}

inline unsigned int clz(uint64_t x) {
  unsigned int res;
  asm("i64.clz.u32 %0, %1": "=r"(res): "r"(x));
  return res;
}

inline unsigned int ctz(uint64_t x) {
  unsigned int res;
  asm("i64.ctz.u32 %0, %1": "=r"(res): "r"(x));
  return res;
}

inline uint64_t upper_bit(uint64_t x) {
  return x ? UINT64_C(1) << (63 - clz(x)) : 0;
}

constexpr uint64_t mask1[] = {
  UINT64_C(0x0080808080808080),
  UINT64_C(0x7F00000000000000),
  UINT64_C(0x0102040810204000),
  UINT64_C(0x0040201008040201)
};
constexpr uint64_t mask2[] = {
  UINT64_C(0x0101010101010100),
  UINT64_C(0x00000000000000FE),
  UINT64_C(0x0002040810204080),
  UINT64_C(0x8040201008040200)
};

template <int simd_index>
uint64_t flip_impl(const Board& bd, int pos) {
  uint64_t OM = bd.op;
  if (simd_index) OM &= UINT64_C(0x7E7E7E7E7E7E7E7E);
  uint64_t mask = mask1[simd_index] >> (63 - pos);
  uint64_t outflank = upper_bit(~OM & mask) & bd.me;
  uint64_t flipped = (-outflank << 1) & mask;
  mask = mask2[simd_index] << pos;
  outflank = mask & ((OM | ~mask) + 1) & bd.me;
  flipped |= (outflank - (outflank != 0)) & mask;
  return flipped;
}

__attribute__((noinline)) uint64_t flip(const Board& bd, int pos) {
  return flip_impl<0>(bd, pos) | flip_impl<1>(bd, pos) | flip_impl<2>(bd, pos) | flip_impl<3>(bd, pos);
}

Board move(const Board& bd, uint64_t flips, int pos) {
  return Board(bd.op ^ flips, (bd.me ^ flips) | (UINT64_C(1) << pos));
}

Board unmove(const Board& bd, uint64_t flips, int pos) {
  return Board(bd.op ^ flips ^ (UINT64_C(1) << pos), bd.me ^ flips);
}

Board move_pass(const Board& bd) {
  return Board(bd.op, bd.me);
}

Board unmove_pass(const Board &bd) {
  return Board(bd.op, bd.me);
}

signed char alpha_beta(
    Board bd, signed char alpha, signed char beta, bool passed_prev = false);

signed char alpha_beta_naive(Board bd, signed char alpha, signed char beta, bool passed_prev = false) {
  signed char result = -64;
  bool pass = true;
  for (uint64_t bits = empty(bd); bits; bits &= bits-1) {
    uint64_t bit = bits & -bits;
    int pos = ctz(bit);
    uint64_t flips = flip(bd, pos);
    if (flips) {
      pass = false;
      Board next = move(bd, flips, pos);
      result = max(result, -alpha_beta_naive(next, -beta, -alpha));
      if (result >= beta) return result;
      alpha = max(alpha, result);
    }
  }
  if (pass) {
    if (passed_prev) {
      return score(bd);
    } else {
      Board next = move_pass(bd);
      result = -alpha_beta_naive(next, -beta, -alpha, true);
    }
  }
  return result;
}

void swap(char &x, char &y) {
  char tmp = x;
  x = y;
  y = tmp;
}

void sort_by_key(char *values, char *keys, const int count) {
  for (int i = 1; i < count; ++i) {
    int j = i;
    while (keys[j] < keys[j-1]) {
      swap(keys[j], keys[j-1]);
      swap(values[j], values[j-1]);
      --j;
      if (j <= 0) break;
    }
  }
}

__attribute__((noinline)) uint64_t mobility_num(const Board bd) {
  int count = 0;
  for (uint64_t bits = empty(bd); bits; bits &= bits-1) {
    uint64_t bit = bits & -bits;
    int pos = ctz(bit);
    uint64_t flips = flip(bd, pos);
    if (flips) {
      ++count;
    }
  }
  return count;
}

constexpr size_t max_mobility = 10;
signed char alpha_beta_fastest_first(
    Board bd, signed char alpha, signed char beta, bool passed_prev = false) {
  char pos_ary[max_mobility];
  char cnt_ary[max_mobility];
  int mobility_count = 0;
  for (uint64_t bits = empty(bd); bits; bits &= bits-1) {
    uint64_t bit = bits & -bits;
    int pos = ctz(bit);
    uint64_t flips = flip(bd, pos);
    if (flips) {
      Board next = move(bd, flips, pos);
      pos_ary[mobility_count] = pos;
      cnt_ary[mobility_count] = mobility_num(next);
      ++mobility_count;
    }
  }
  sort_by_key(pos_ary, cnt_ary, mobility_count);
  signed char result = -64;
  bool pass = true;
  for (size_t i = 0; i < mobility_count; ++i) {
    int pos = pos_ary[i];
    uint64_t flips = flip(bd, pos);
    if (flips) {
      pass = false;
      Board next = move(bd, flips, pos);
      result = max(result, -alpha_beta(next, -beta, -alpha));
      if (result >= beta) return result;
      alpha = max(alpha, result);
    }
  }
  if (pass) {
    if (passed_prev) {
      return score(bd);
    } else {
      Board next = move_pass(bd);
      result = -alpha_beta(next, -beta, -alpha, true);
    }
  }
  return result;
}

signed char alpha_beta(
    Board bd, signed char alpha, signed char beta, bool passed_prev) {
  if (popcnt(empty(bd)) <= 6) return alpha_beta_naive(bd, alpha, beta, passed_prev);
  else return alpha_beta_fastest_first(bd, alpha, beta, passed_prev);
}

void pzc_Solve(
    const AlphaBetaProblem * const problems, int32_t * const results,
    const size_t n, size_t *global_index) {
  for (size_t i = pz_atomic_add(global_index, 1); i < n;
      i = pz_atomic_add(global_index, 1)) {
    const AlphaBetaProblem& abp = problems[i];
    results[i] = alpha_beta(abp.bd, abp.alpha, abp.beta);
  }
  flush();
}
